services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: alphatechx-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: alphatechx
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for existing backend
  mongodb:
    image: mongo:7-jammy
    container_name: alphatechx-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: alphatechx
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: alphatechx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Existing Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: ../backend.Dockerfile
    container_name: alphatechx-backend
    environment:
      NODE_ENV: development
      PORT: 5001
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/alphatechx?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRE: 30d
      REDIS_URL: redis://redis:6379
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped

  # New Bot Service
  bot-service:
    build:
      context: ./bot-service
      dockerfile: Dockerfile
    container_name: alphatechx-bot-service
    environment:
      NODE_ENV: development
      PORT: 4000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bot_service
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      SLACK_CLIENT_ID: ${SLACK_CLIENT_ID:-}
      SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET:-}
      SLACK_SCOPES: commands,chat:write,app_mentions:read,channels:history,groups:history,im:history,mpim:history
      SLACK_REDIRECT_URI: http://localhost:4000/api/slack/oauth/callback
      MS_TEAMS_BOT_APP_ID: ${MS_TEAMS_BOT_APP_ID:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
    ports:
      - "4000:4000"
    volumes:
      - ./bot-service:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      - postgres
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: alphatechx-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5001/api
      REACT_APP_BOT_API_URL: http://localhost:4000/api
      GENERATE_SOURCEMAP: false
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
      - bot-service
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: alphatechx-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - bot-service
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
